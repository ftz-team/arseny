from django.core.management.base import BaseCommand

import telebot
from telebot import types
import re
from core.models import User, Position, Tag

BASE_URL = 'http://80.78.246.198:3000'

menuKeyboard = types.ReplyKeyboardMarkup(resize_keyboard = True)
menuKeyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
menuKeyboard.add("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")

def create_link(tg_id):
    return BASE_URL + '?tg_id=' + str(tg_id)

def get_user_insance(message) -> User:
    user_id = message.from_user.id
    username = message.from_user.username
    user, _ = User.objects.get_or_create(tg_id=user_id, username=username)
    return user

def start_bot():
    bot = telebot.TeleBot('2040176965:AAHk1imMOdXlI_67w8fquf0MZjs5EkL7ujw')

    @bot.callback_query_handler(func=lambda call: True)
    def callback_worker(call):
        if call.data == "yes":
            link = create_link(call.message.chat.id)
            bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏ –ø–æ —Å—Å—ã–ª–∫–µ - \n {link}'.format(link=link))
            bot.register_next_step_handler(call.message, get_tags)
        if call.data in {'20' , '40' , '60' , '80' , '90' , '120' , '140', '160' , '200'} :
            user = User.objects.get(tg_id=call.message.chat.id)
            user.salary_from = int(call.data) * 1000
            user.save()
            keyboard = types.InlineKeyboardMarkup()
            key_3 = types.InlineKeyboardButton(text='–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data='interval,daily')
            key_5 = types.InlineKeyboardButton(text='–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data='interval,weekly')
            key_7 = types.InlineKeyboardButton(text='–†–∞–∑ –≤ –º–µ—Å—è—Ü', callback_data='interval,monthly')
            keyboard.add(key_3, key_5, key_7)
            bot.send_message(call.message.chat.id, '–ö—Ä—É—Ç–æ!\n–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏?', reply_markup=keyboard)

        if call.data.count("interval") > 0:
            interval = call.data.split(",")[-1]
            user = User.objects.get(tg_id=call.message.chat.id)

            if interval == 'daily':
                user.days_interval = 1
            elif interval == 'weekly':
                user.days_interval = 7
            else:
                user.days_interval = 30
            user.save()
            bot.send_message(call.message.chat.id, '–Ø –∑–Ω–∞—é —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!\n–£–∂–µ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø–æ–¥–±–æ—Ä–∫—É –≤–∞–∫–∞–Ω—Å–∏–π)',reply_markup=menuKeyboard)
            bot.send_message(call.message.chat.id, 'üéâ',reply_markup=menuKeyboard)

    @bot.message_handler(commands=['start'])
    def start_message(message):
        keyboard = types.InlineKeyboardMarkup()
        key_yes = types.InlineKeyboardButton(text='–î–∞–≤–∞–π)', callback_data='yes')
        keyboard.add(key_yes)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É. –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º. –ù–∞—á–Ω–µ–º?', reply_markup=keyboard)

    @bot.message_handler(commands=['menu'])
    def start_message(message):
        bot.send_message(message.chat.id, '–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?', reply_markup=menuKeyboard)

    @bot.message_handler(commands=['about'])
    def start_message(message):
        bot.send_message(message.chat.id, '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Ä—Å–µ–Ω–∏–π, —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã.\n–¢–æ–∂–µ —É—Å—Ç–∞–ª –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π? –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø–æ–ª—É—á–∞–π –ø–æ–¥–±–æ—Ä–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–µ–∫—Ç–æ–º.', reply_markup=menuKeyboard)

    @bot.message_handler()
    def start_message(message):
        if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
            link = create_link(message.chat.id)
            bot.send_message(message.chat.id, '–ù–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏ –ø–æ —Å—Å—ã–ª–∫–µ - \n{link}'.format(link=link))
            bot.register_next_step_handler(message, get_tags)
        elif message.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            bot.send_message(message.chat.id, "–†–∞–¥—ã –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º!\nContact us: @qootee", reply_markup=menuKeyboard)


    def get_tags(message):
        keyboard = types.InlineKeyboardMarkup()
        key_20 = types.InlineKeyboardButton(text='20.000—Ä', callback_data='20')
        key_40 = types.InlineKeyboardButton(text='40.000—Ä', callback_data='40')
        key_60 = types.InlineKeyboardButton(text='60.000—Ä', callback_data='60')
        key_80 = types.InlineKeyboardButton(text='80.000—Ä', callback_data='80')
        key_100 = types.InlineKeyboardButton(text='100.000—Ä', callback_data='100')
        key_120 = types.InlineKeyboardButton(text='120.000—Ä', callback_data='120')
        key_140 = types.InlineKeyboardButton(text='140.000—Ä', callback_data='140')
        key_160 = types.InlineKeyboardButton(text='160.000—Ä', callback_data='160')
        key_200 = types.InlineKeyboardButton(text='200.000—Ä', callback_data='200')
        keyboard.add(key_20, key_40, key_60, key_80, key_100, key_120, key_140, key_160, key_200)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π', reply_markup=keyboard)
    
    def get_message_count(message):

        message_count_per_day = int(message.text)
        print(message_count_per_day)

        user = get_user_insance(message)
        user.messages_count_per_day = message_count_per_day
        user.save()

    bot.polling(none_stop=True, interval=0)

class Command(BaseCommand):
    help = 'Bot'

    def handle(self, *args, **options):
        start_bot()
        